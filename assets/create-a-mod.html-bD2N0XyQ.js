import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as o,a as n,d as s,e,b as t,w as l,r as d,o as h}from"./app-CSZVkQgG.js";const p="/assets/create-a-zip-D6ezsbd8.png",c="/assets/add-files-D4yNL4Hy.png",k="/assets/select-files-CcWm_lZW.png",m="/assets/generate-a-zip-DQFwwdpr.png",u={};function g(y,i){const a=d("RouteLink");return h(),o("div",null,[i[10]||(i[10]=n(`<h2 id="preliminary-learning" tabindex="-1"><a class="header-anchor" href="#preliminary-learning"><span>Preliminary Learning</span></a></h2><p>SugarCube is a game engine built with HTML5 technology. Before creating a mod, we strongly recommend that you <a href="https://developer.mozilla.org/docs/Learn_web_development/Core/Scripting/What_is_JavaScript" target="_blank" rel="noopener noreferrer">learn JavaScript</a>. If you need custom styles, you may also want to <a href="https://developer.mozilla.org/docs/Learn_web_development/Getting_started/Your_first_website/Styling_the_content" target="_blank" rel="noopener noreferrer">learn CSS</a>.</p><p>SugarCube comes with jQuery v3. jQuery is a JavaScript library that makes it easier to manipulate HTML. You can learn jQuery <a href="https://www.w3schools.com/jquery/" target="_blank" rel="noopener noreferrer">here</a>.</p><h2 id="environment-preparation" tabindex="-1"><a class="header-anchor" href="#environment-preparation"><span>Environment Preparation</span></a></h2><ul><li>A suitable archive tool. If you don’t know what to choose, <a href="https://www.7-zip.org/" target="_blank" rel="noopener noreferrer">7-Zip</a> or <a href="https://peazip.github.io/" target="_blank" rel="noopener noreferrer">PeaZip</a> are good options.</li><li>A suitable text editor. If you don’t know what to choose, <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VSCode</a> or <a href="https://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">Sublime Text</a> are good options.</li></ul><h2 id="file-structure" tabindex="-1"><a class="header-anchor" href="#file-structure"><span>File Structure</span></a></h2><p>The internal file structure of a YASCML mod package typically looks like this:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>hello-world/</span></span>
<span class="line"><span>├─ meta.json</span></span>
<span class="line"><span>├─ preload.js</span></span>
<span class="line"><span>├─ main/</span></span>
<span class="line"><span>│   └─ foo.js</span></span>
<span class="line"><span>└─ styles.css</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Make sure the <code>meta.json</code> file is located in the root directory of the mod package; otherwise, YASCML will not be able to find it.</p><h2 id="writing-meta-json" tabindex="-1"><a class="header-anchor" href="#writing-meta-json"><span>Writing meta.json</span></a></h2><p>YASCML uses a JSON file (<code>meta.json</code>) to define the metadata of a mod. The <code>meta.json</code> file must be placed in the root directory of the mod package to indicate that the archive is a valid YASCML mod.</p><p>A minimal <code>meta.json</code> file looks like this:</p><div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // The mod ID. This field is the unique identifier of the mod. Do not change it arbitrarily.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // The mod name. This field is usually displayed in the mod manager.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // The mod author. This field supports multiple formats. See https://yascml.github.io/reference/meta.json.html#author</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;author&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Misa Liu&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // The mod version. This field must follow the Semantic Versioning specification, otherwise YASCML will refuse to load it.</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // For the complete meta.json reference, see https://yascml.github.io/reference/meta.json.html</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>That’s right—a minimal <code>meta.json</code> does not need to include any scripts! However, such a mod will have no functionality and can only be used for other mods to read data from its package. To implement any functionality, you must write mod scripts for it.</p><h2 id="writing-mod-scripts" tabindex="-1"><a class="header-anchor" href="#writing-mod-scripts"><span>Writing Mod Scripts</span></a></h2><p>You are free to write mod scripts in JavaScript. We recommend following these guidelines:</p><ul><li>Unless absolutely necessary, <strong>DO NOT</strong> directly modify the game data inside <code>&lt;tw-storydata&gt;</code>. Instead, use existing dependency mods (such as YASCHook) to modify game data.</li><li>Use an <a href="https://developer.mozilla.org/docs/Glossary/IIFE" target="_blank" rel="noopener noreferrer">Immediately Invoked Function Expression (IIFE)</a> to wrap your script code. This prevents variables from leaking into the global scope and causing unpredictable conflicts:<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;use strict&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...your codes here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Mod loaded!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>To reduce the size of your mod and avoid conflicts, prefer using dependency mods rather than re-implementing functionality yourself.</li></ul><p>By default, scripts only support synchronous initialization. If your script needs to wait for asynchronous operations (such as loading remote resources), add them to <code>window.__AfterInit</code>:</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> asyncInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Async actions...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">__AfterInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  asyncInit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="packaging-the-mod-files" tabindex="-1"><a class="header-anchor" href="#packaging-the-mod-files"><span>Packaging the Mod Files</span></a></h2><h3 id="modifying-meta-json" tabindex="-1"><a class="header-anchor" href="#modifying-meta-json"><span>Modifying <code>meta.json</code></span></a></h3>`,21)),s("p",null,[i[2]||(i[2]=e("We need to modify the ",-1)),i[3]||(i[3]=s("code",null,"meta.json",-1)),i[4]||(i[4]=e(" file so that YASCML can properly load and run the scripts we just wrote. You need to add the ",-1)),t(a,{to:"/reference/meta.json.html#preloadscripts"},{default:l(()=>[...i[0]||(i[0]=[s("code",null,"preloadScripts",-1)])]),_:1}),i[5]||(i[5]=e(" and/or ",-1)),t(a,{to:"/reference/meta.json.html#postloadscripts"},{default:l(()=>[...i[1]||(i[1]=[s("code",null,"postloadScripts",-1)])]),_:1}),i[6]||(i[6]=e(" fields:",-1))]),i[11]||(i[11]=n(`<div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;preloadScripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;preload.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;postloadScripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;main/foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[i[8]||(i[8]=e("If you are unsure which to choose, refer to the ",-1)),t(a,{to:"/reference/life-cycle.html"},{default:l(()=>[...i[7]||(i[7]=[e("YASCML Life Cycle",-1)])]),_:1}),i[9]||(i[9]=e(".",-1))]),i[12]||(i[12]=n('<h3 id="creating-the-mod-package" tabindex="-1"><a class="header-anchor" href="#creating-the-mod-package"><span>Creating the Mod Package</span></a></h3><p>Here we will use <a href="https://peazip.github.io/" target="_blank" rel="noopener noreferrer">PeaZip</a> as an example to demonstrate how to create a mod package.</p><ol><li>Launch PeaZip, and from the top <code>File</code> menu select <code>Create new archive</code>: <img src="'+p+'" alt="Create a zip file" loading="lazy"></li><li>Right-click in the file list and select <code>Add files</code>: <img src="'+c+'" alt="Add files" loading="lazy"></li><li>In the file selector, choose <code>meta.json</code> and your script files: <img src="'+k+'" alt="Select files" loading="lazy"></li><li>Check PeaZip’s compression parameters: <ul><li>Ensure <code>Type</code> is set to <code>ZIP</code></li><li>Ensure <code>Split</code> is set to <code>Do not split</code></li><li>Ensure the archive password is empty (the yellow lock icon next to the output directory should be unlocked)</li><li>Remember the output location of the archive <img src="'+m+'" alt="Generate zip file" loading="lazy"></li></ul></li><li>Click <code>OK</code> in the bottom-right corner, and the mod package will be successfully created.</li></ol>',3))])}const v=r(u,[["render",g]]),b=JSON.parse('{"path":"/guide/create-a-mod.html","title":"Create a Mod","lang":"en-US","frontmatter":{"icon":"ruler-combined","title":"Create a Mod","description":"Preliminary Learning SugarCube is a game engine built with HTML5 technology. Before creating a mod, we strongly recommend that you learn JavaScript. If you need custom styles, y...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Create a Mod\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-18T09:56:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misa Liu\\",\\"url\\":\\"https://misaliu.top\\"}]}"],["meta",{"property":"og:url","content":"https://yascml.github.io/guide/create-a-mod.html"}],["meta",{"property":"og:site_name","content":"YASCML"}],["meta",{"property":"og:title","content":"Create a Mod"}],["meta",{"property":"og:description","content":"Preliminary Learning SugarCube is a game engine built with HTML5 technology. Before creating a mod, we strongly recommend that you learn JavaScript. If you need custom styles, y..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-10-18T09:56:55.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-18T09:56:55.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://yascml.github.io/zh/guide/create-a-mod.html"}]]},"git":{"createdTime":1760781415000,"updatedTime":1760781415000,"contributors":[{"name":"Misa Liu","username":"","email":"misaliu@misaliu.top","commits":1}]},"readingTime":{"minutes":2.3,"words":691},"filePathRelative":"guide/create-a-mod.md","autoDesc":true}');export{v as comp,b as data};
