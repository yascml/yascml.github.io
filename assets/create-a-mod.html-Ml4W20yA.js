import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,a as n,d as a,e as i,b as l,w as t,r as h,o as d}from"./app-B_x3xzDT.js";const o="/assets/create-a-zip-CLy3wDK9.png",k="/assets/add-files-DZ5Gz1t2.png",c="/assets/select-files-CcWm_lZW.png",g="/assets/generate-a-zip-CVHysXia.png",u={};function m(A,s){const e=h("RouteLink");return d(),p("div",null,[s[12]||(s[12]=n(`<h2 id="前期学习" tabindex="-1"><a class="header-anchor" href="#前期学习"><span>前期学习</span></a></h2><p>SugarCube 是一款使用 HTML5 技术的游戏引擎，在制作模组前，我们强烈建议您 <a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Core/Scripting/What_is_JavaScript" target="_blank" rel="noopener noreferrer">学习 JavaScript</a>。如果您有自定义样式的需求，您还可能会需要 <a href="https://developer.mozilla.org/zh-CN/docs/Learn_web_development/Getting_started/Your_first_website/Styling_the_content" target="_blank" rel="noopener noreferrer">学习 CSS</a>。</p><p>SugarCube 内置了 jQuery v3。jQuery 是一个 JavaScript 库，它可以让您更方便地操作 HTML。您可以 <a href="https://www.runoob.com/jquery/jquery-tutorial.html" target="_blank" rel="noopener noreferrer">前往学习 jQuery</a>。</p><h2 id="环境准备" tabindex="-1"><a class="header-anchor" href="#环境准备"><span>环境准备</span></a></h2><ul><li>一款合适的压缩包处理工具。如果您不知道选择什么，<a href="https://www.7-zip.org/" target="_blank" rel="noopener noreferrer">7-Zip</a> 或 <a href="https://peazip.github.io/" target="_blank" rel="noopener noreferrer">PeaZip</a> 是不错的选择。</li><li>一款合适的文本编辑工具。如果您不知道选择什么， <a href="https://code.visualstudio.com/" target="_blank" rel="noopener noreferrer">VSCode</a> 或 <a href="https://www.sublimetext.com/" target="_blank" rel="noopener noreferrer">Sublime Text</a> 是不错的选择。</li></ul><h2 id="文件结构" tabindex="-1"><a class="header-anchor" href="#文件结构"><span>文件结构</span></a></h2><p>一个 YASCML 模组压缩包的内部文件结构看起来大概是这样的：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-"><span class="line"><span>hello-world/</span></span>
<span class="line"><span>├─ meta.json</span></span>
<span class="line"><span>├─ preload.js</span></span>
<span class="line"><span>├─ main/</span></span>
<span class="line"><span>│   └─ foo.js</span></span>
<span class="line"><span>└─ styles.css</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>请确保 <code>meta.json</code> 文件在模组压缩包根目录下，否则 YASCML 会找不到它。</p><h2 id="编写-meta-json" tabindex="-1"><a class="header-anchor" href="#编写-meta-json"><span>编写 <code>meta.json</code></span></a></h2><p>YASCML 使用一个 JSON 文件（也就是 <code>meta.json</code>）来定义模组的元信息。<code>meta.json</code> 会被放置在模组压缩包的根目录下，以表明该压缩包是一个合法的 YASCML 模组。</p><p>一个最小的 <code>meta.json</code> 文件看起来像这样：</p><div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模组的 ID，该字段是模组的唯一标识符，请不要随意修改</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;id&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;hello-world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模组的名称，该字段一般用在模组管理器中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;name&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello world&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模组的作者，该字段拥有多个格式，可以前往 https://yascml.github.io/zh/reference/meta.json.html#author 查阅</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;author&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Misa Liu&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 模组的版本，该字段需要符合语义化版本规范，否则 YASCML 会拒绝加载</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;version&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0.0&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 完整的 meta.json 文件参考可前往 https://yascml.github.io/zh/reference/meta.json.html 查阅</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，一个最小的 <code>meta.json</code> 可以不附带任何脚本！但于此同时这个模组就没有任何功能了，只能让其他模组读取该模组压缩包内的数据。要实现任何功能，您必须为该模组编写脚本文件。</p><h2 id="编写模组脚本" tabindex="-1"><a class="header-anchor" href="#编写模组脚本"><span>编写模组脚本</span></a></h2><p>您可以自由地使用 JavaScript 编写模组脚本。我们建议您在编写脚本时遵循以下规范：</p><ul><li>除非万不得已，请 <strong>不要</strong> 直接修改 <code>&lt;tw-storydata&gt;</code> 内的游戏数据。请使用现成的依赖模组（例如 YASCHook）修改游戏数据</li><li>建议使用 <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/IIFE" target="_blank" rel="noopener noreferrer">立即调用函数表达式（IIFE）</a> 来包裹脚本代码，以避免内部使用的变量污染到全局以导致不可预计的冲突：<div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &#39;use strict&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...your codes here</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;Mod loaded!&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>为了减小模组的体积和避免冲突，建议在实现某些功能前优先使用依赖模组而非自行实现</li></ul><p>脚本默认仅支持同步初始化，如果您的脚本中需要等待异步操作（例如加载远程资源），请将它们添加到 <code>window.__AfterInit</code> 中：</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-js"><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> asyncInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // Async actions...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">window</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">__AfterInit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">  asyncInit</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="打包模组文件" tabindex="-1"><a class="header-anchor" href="#打包模组文件"><span>打包模组文件</span></a></h2><h3 id="修改-meta-json" tabindex="-1"><a class="header-anchor" href="#修改-meta-json"><span>修改 <code>meta.json</code></span></a></h3>`,21)),a("p",null,[s[2]||(s[2]=i("我们需要修改 ",-1)),s[3]||(s[3]=a("code",null,"meta.json",-1)),s[4]||(s[4]=i(" 文件，以使 YASCML 可以正常地加载并运行刚才所编写的脚本文件。您需要在 ",-1)),s[5]||(s[5]=a("code",null,"meta.json",-1)),s[6]||(s[6]=i(" 中添加 ",-1)),l(e,{to:"/zh/reference/meta.json.html#preloadscripts"},{default:t(()=>[...s[0]||(s[0]=[a("code",null,"preloadScripts",-1)])]),_:1}),s[7]||(s[7]=i(" 和/或 ",-1)),l(e,{to:"/zh/reference/meta.json.html#postloadscripts"},{default:t(()=>[...s[1]||(s[1]=[a("code",null,"postloadScripts",-1)])]),_:1}),s[8]||(s[8]=i(" 字段：",-1))]),s[13]||(s[13]=n(`<div class="language-jsonc line-numbers-mode" data-highlighter="shiki" data-ext="jsonc" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code class="language-jsonc"><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;preloadScripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;preload.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;postloadScripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: [</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">    &quot;main/foo.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ],</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),a("p",null,[s[10]||(s[10]=i("如果您不知道如何选择，您可以参考 ",-1)),l(e,{to:"/zh/reference/life-cycle.html"},{default:t(()=>[...s[9]||(s[9]=[i("YASCML 的生命周期",-1)])]),_:1}),s[11]||(s[11]=i("。",-1))]),s[14]||(s[14]=n('<h3 id="制作模组压缩包" tabindex="-1"><a class="header-anchor" href="#制作模组压缩包"><span>制作模组压缩包</span></a></h3><p>此处将以 <a href="https://peazip.github.io/" target="_blank" rel="noopener noreferrer">PeaZip</a> 为例，演示如何创建一个模组压缩包。</p><ol><li>启动 PeaZip，从软件顶部的 <code>文件</code> 菜单中选择 <code>新建归档文件</code>： <img src="'+o+'" alt="Create a zip file" loading="lazy"></li><li>在文件列表中右键，在菜单中选择 <code>添加文件</code>： <img src="'+k+'" alt="Add files" loading="lazy"></li><li>在弹出的文件选择器中，选择 <code>meta.json</code> 以及脚本文件： <img src="'+c+'" alt="Select files" loading="lazy"></li><li>检查 PeaZip 的压缩参数： <ul><li>检查 <code>类型</code> 是否为 <code>ZIP</code></li><li>检查 <code>分割</code> 是否为 <code>不分割</code></li><li>检查压缩包密码是否为空（即输出目录旁边的黄锁是否上锁）</li><li>记住压缩包的输出位置 <img src="'+g+'" alt="Generate zip file" loading="lazy"></li></ul></li><li>点击右下角的 <code>确定</code>，模组压缩包即成功被创建</li></ol>',3))])}const b=r(u,[["render",m]]),B=JSON.parse('{"path":"/zh/guide/create-a-mod.html","title":"制作模组","lang":"zh-CN","frontmatter":{"icon":"ruler-combined","title":"制作模组","description":"前期学习 SugarCube 是一款使用 HTML5 技术的游戏引擎，在制作模组前，我们强烈建议您 学习 JavaScript。如果您有自定义样式的需求，您还可能会需要 学习 CSS。 SugarCube 内置了 jQuery v3。jQuery 是一个 JavaScript 库，它可以让您更方便地操作 HTML。您可以 前往学习 jQuery。 环境...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"制作模组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-20T15:51:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misa Liu\\",\\"url\\":\\"https://misaliu.top\\"}]}"],["meta",{"property":"og:url","content":"https://yascml.github.io/zh/guide/create-a-mod.html"}],["meta",{"property":"og:site_name","content":"YASCML"}],["meta",{"property":"og:title","content":"制作模组"}],["meta",{"property":"og:description","content":"前期学习 SugarCube 是一款使用 HTML5 技术的游戏引擎，在制作模组前，我们强烈建议您 学习 JavaScript。如果您有自定义样式的需求，您还可能会需要 学习 CSS。 SugarCube 内置了 jQuery v3。jQuery 是一个 JavaScript 库，它可以让您更方便地操作 HTML。您可以 前往学习 jQuery。 环境..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-20T15:51:58.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-20T15:51:58.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://yascml.github.io/guide/create-a-mod.html"}]]},"git":{"createdTime":1760975518000,"updatedTime":1760975518000,"contributors":[{"name":"Misa Liu","username":"","email":"misaliu@misaliu.top","commits":1}]},"readingTime":{"minutes":3.44,"words":1031},"filePathRelative":"zh/guide/create-a-mod.md","autoDesc":true}');export{b as comp,B as data};
