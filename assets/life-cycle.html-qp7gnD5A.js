import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as t,a as i,e as a,b as l,w as s,r as p,o as c}from"./app-BjUpZF2D.js";const d={};function m(u,e){const o=p("RouteLink");return c(),r("div",null,[e[3]||(e[3]=t("p",null,"YASCML 的生命周期非常简单，在用户启动游戏后，启动流程可以被分为这么几个周期：",-1)),e[4]||(e[4]=t("h2",{id:"_1-初始化加载器",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#_1-初始化加载器"},[t("span",null,"1. 初始化加载器")])],-1)),e[5]||(e[5]=t("p",null,[a("加载器会在游戏启动后的第一时间内加载。加载器会在这个阶段读取模组文件、检查模组依赖并将模组按照加载顺序排序，最后将它们存放在 "),t("code",null,"window.YASCML.mods"),a(" 内。")],-1)),t("p",null,[e[1]||(e[1]=a("如果在游戏内定义了 ",-1)),l(o,{to:"/zh/reference/hot-patching.html"},{default:s(()=>[...e[0]||(e[0]=[a("热补丁工具",-1)])]),_:1}),e[2]||(e[2]=a("，那么加载器会先运行热补丁工具，然后再加载自身。",-1))]),e[6]||(e[6]=i('<h2 id="_2-加载模组样式与预加载脚本" tabindex="-1"><a class="header-anchor" href="#_2-加载模组样式与预加载脚本"><span>2. 加载模组样式与预加载脚本</span></a></h2><p>模组定义的样式文件和预加载脚本会在这个阶段按顺序运行。一般在这个阶段，模组会：</p><ul><li>暴露模组 API</li><li>Hook 引擎暴露的 API</li><li>预加载需要使用的游戏数据（例如段落数据）</li></ul><h2 id="_3-初始化-sugarcube-引擎" tabindex="-1"><a class="header-anchor" href="#_3-初始化-sugarcube-引擎"><span>3. 初始化 SugarCube 引擎</span></a></h2><p>SugarCube 引擎会在这个阶段被初始化。请注意在该阶段之前全局对象 <code>window.SugarCube</code> 就已被定义且可以被访问。</p><h2 id="_4-加载后加载脚本" tabindex="-1"><a class="header-anchor" href="#_4-加载后加载脚本"><span>4. 加载后加载脚本</span></a></h2><p>模组定义的后加载脚本会在这个阶段按顺序运行。一般在这个阶段，模组会：</p><ul><li>清理模组文件</li><li>在游戏内添加自定义 DOM（例如模组管理器入口）</li><li>Hook 可被异步处理的游戏数据（例如图像资源）</li></ul><h2 id="_5-生命周期结束" tabindex="-1"><a class="header-anchor" href="#_5-生命周期结束"><span>5. 生命周期结束</span></a></h2><p>加载器已经完成了所有工作，在这个阶段游戏已经可玩。</p>',10))])}const g=n(d,[["render",m]]),y=JSON.parse('{"path":"/zh/reference/life-cycle.html","title":"生命周期","lang":"zh-CN","frontmatter":{"icon":"recycle","title":"生命周期","description":"YASCML 的生命周期非常简单，在用户启动游戏后，启动流程可以被分为这么几个周期： 1. 初始化加载器 加载器会在游戏启动后的第一时间内加载。加载器会在这个阶段读取模组文件、检查模组依赖并将模组按照加载顺序排序，最后将它们存放在 window.YASCML.mods 内。 如果在游戏内定义了 ，那么加载器会先运行热补丁工具，然后再加载自身。 2. 加...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-10-21T09:00:35.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Misa Liu\\",\\"url\\":\\"https://misaliu.top\\"}]}"],["meta",{"property":"og:url","content":"https://yascml.github.io/zh/reference/life-cycle.html"}],["meta",{"property":"og:site_name","content":"YASCML"}],["meta",{"property":"og:title","content":"生命周期"}],["meta",{"property":"og:description","content":"YASCML 的生命周期非常简单，在用户启动游戏后，启动流程可以被分为这么几个周期： 1. 初始化加载器 加载器会在游戏启动后的第一时间内加载。加载器会在这个阶段读取模组文件、检查模组依赖并将模组按照加载顺序排序，最后将它们存放在 window.YASCML.mods 内。 如果在游戏内定义了 ，那么加载器会先运行热补丁工具，然后再加载自身。 2. 加..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:locale:alternate","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2025-10-21T09:00:35.000Z"}],["meta",{"property":"article:modified_time","content":"2025-10-21T09:00:35.000Z"}],["link",{"rel":"alternate","hreflang":"en-us","href":"https://yascml.github.io/reference/life-cycle.html"}]]},"git":{"createdTime":1761037235000,"updatedTime":1761037235000,"contributors":[{"name":"Misa Liu","username":"","email":"misaliu@misaliu.top","commits":1}]},"readingTime":{"minutes":1.27,"words":381},"filePathRelative":"zh/reference/life-cycle.md","autoDesc":true}');export{g as comp,y as data};
